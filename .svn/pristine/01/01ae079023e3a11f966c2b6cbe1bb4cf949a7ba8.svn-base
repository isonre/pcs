package com.yunforge.base.web.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.shiro.authc.credential.PasswordService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;

import com.yunforge.base.model.Person;
import com.yunforge.base.model.User;
import com.yunforge.base.service.PersonManager;
import com.yunforge.base.service.PreferenceManager;
import com.yunforge.base.service.UserManager;
import com.yunforge.common.Constants;
import com.yunforge.common.bean.GridBean;
import com.yunforge.common.util.WebUtils;
import com.yunforge.core.annotation.MethodRemark;
import com.yunforge.core.web.controller.BaseController;

@Controller
@SessionAttributes("user")
public class UserController extends BaseController {
	final static Log log = LogFactory.getLog(UserController.class);

	@Autowired
	private UserManager userManager;

	@Autowired
	private PersonManager personManager;

	@Autowired
	private PreferenceManager preferenceManager;

	@Autowired
	private PasswordService passwordService;

	@MethodRemark(remark = "访问用户管理首页")
	@RequestMapping(value = "/user", method = RequestMethod.GET)
	public String index(HttpServletRequest request, ModelMap model) {
		model.addAttribute("actionUrl", request.getContextPath()
				+ "/user/delete");
		String pageSize = WebUtils.getParaValue("DEFAULT_PAGE_SIZE", request);
		model.addAttribute(Constants.PAGE_SIZE,
				pageSize == null ? 15 : Integer.valueOf(pageSize));
		return "/user/user";
	}

	@MethodRemark(remark = "访问用户列表")
	@RequestMapping(value = "/user/list")
	public @ResponseBody
	GridBean<User> listUsers(Integer page, Integer rows, String sidx,
			String sord, boolean search, String searchField, String searchOper,
			String searchString, String filters,String userNameParam) {
		int pageSize = rows == null ? 20 : rows.intValue(); // 每页行数
		int pageIndex = (page == null || page == 0) ? 0 : page.intValue() - 1;// 当前页数
		Sort sort = null;
		if("persName".equals(sidx)) {
			sidx = "person.persName";
		}
		if (sidx != null && !sidx.equals("")) {
			if (sord.equals("asc")) {
				sort = new Sort(new Sort.Order(Sort.Direction.ASC, sidx));
			} else {
				sort = new Sort(new Sort.Order(Sort.Direction.DESC, sidx));
			}
		} else {
			sort = new Sort(new Sort.Order(Sort.Direction.ASC, "username"));
		}

		Pageable pageable = new PageRequest(pageIndex, pageSize, sort);
		Page<User> users = userManager.search(filters, pageable,searchField,searchOper,searchString,userNameParam);

		List<User> userList = new ArrayList<User>();
		userList.addAll(users.getContent());
		Integer records = (int) users.getTotalElements();

		Integer totalPages = users.getTotalPages();
		Integer currPage = Math.min(totalPages, page);

		GridBean<User> grid = new GridBean<User>();

		grid.setRecords(records);
		grid.setTotal(totalPages);
		grid.setPage(currPage);
		grid.setRows(userList);
		return grid;
	}

	@MethodRemark(remark = "访问群组用户首页")
	@RequestMapping(value = "/user/groupUser/{groupId}", method = RequestMethod.GET)
	public String groupUser(@PathVariable String groupId,
			HttpServletRequest request, ModelMap model) {
		String pageSize = WebUtils.getParaValue("DEFAULT_PAGE_SIZE", request);
		model.addAttribute(Constants.PAGE_SIZE,
				pageSize == null ? 20 : Integer.valueOf(pageSize));
		model.addAttribute("groupId", groupId);
		return "/user/groupUser";
	}

	@MethodRemark(remark = "访问指定群组用户列表")
	@RequestMapping(value = "/user/listGroupUsers/{groupId}", method = RequestMethod.GET)
	public @ResponseBody
	GridBean<User> listGroupUsers(@PathVariable String groupId, Integer rows,
			Integer page, String sidx, String sord, boolean loadonce,
			String filters) {

		int pageSize = rows == null ? 20 : rows.intValue(); // 每页行数
		int pageIndex = (page == null || page == 0) ? 0 : page.intValue() - 1;// 当前页数
		Sort sort = null;
		if (sidx != null && !sidx.equals("")) {
			if (sord.equals("asc")) {
				sort = new Sort(new Sort.Order(Sort.Direction.ASC, sidx));
			} else {
				sort = new Sort(new Sort.Order(Sort.Direction.DESC, sidx));
			}
		} else {
			sort = new Sort(new Sort.Order(Sort.Direction.ASC, "id"));
		}

		Pageable pageable = new PageRequest(pageIndex, pageSize, sort);
		Page<User> users = userManager.listGroupUsers(groupId, filters,
				pageable);

		List<User> userList = new ArrayList<User>();
		userList.addAll(users.getContent());
		Integer records = (int) users.getTotalElements();

		Integer totalPages = users.getTotalPages();
		Integer currPage = Math.min(totalPages, page);

		GridBean<User> grid = new GridBean<User>();

		grid.setRecords(records);
		grid.setTotal(totalPages);
		grid.setPage(currPage);
		grid.setRows(userList);
		return grid;
	}

	@MethodRemark(remark = "访问角色用户首页")
	@RequestMapping(value = "/user/roleUser/{roleId}", method = RequestMethod.GET)
	public String roleUser(@PathVariable String roleId,
			HttpServletRequest request, ModelMap model) {
		String pageSize = WebUtils.getParaValue("DEFAULT_PAGE_SIZE", request);
		model.addAttribute(Constants.PAGE_SIZE,
				pageSize == null ? 15 : Integer.valueOf(pageSize));
		model.addAttribute("roleId", roleId);
		return "/user/roleUser";
	}

	@MethodRemark(remark = "访问指定角色用户列表")
	@RequestMapping(value = "/user/listRoleUsers/{roleId}", method = RequestMethod.GET)
	public @ResponseBody
	GridBean<User> listRoleUsers(@PathVariable String roleId, Integer rows,
			Integer page, String sidx, String sord, boolean loadonce,
			String filters) {

		int pageSize = rows == null ? 20 : rows.intValue(); // 每页行数
		int pageIndex = (page == null || page == 0) ? 0 : page.intValue() - 1;// 当前页数
		Sort sort = null;
		if (sidx != null && !sidx.equals("")) {
			if (sord.equals("asc")) {
				sort = new Sort(new Sort.Order(Sort.Direction.ASC, sidx));
			} else {
				sort = new Sort(new Sort.Order(Sort.Direction.DESC, sidx));
			}
		} else {
			sort = new Sort(new Sort.Order(Sort.Direction.ASC, "id"));
		}

		Pageable pageable = new PageRequest(pageIndex, pageSize, sort);
		Page<User> users = userManager.listRoleUsers(roleId, filters, pageable);

		List<User> userList = new ArrayList<User>();
		userList.addAll(users.getContent());
		Integer records = (int) users.getTotalElements();

		Integer totalPages = users.getTotalPages();
		Integer currPage = Math.min(totalPages, page);

		GridBean<User> grid = new GridBean<User>();

		grid.setRecords(records);
		grid.setTotal(totalPages);
		grid.setPage(currPage);
		grid.setRows(userList);
		return grid;
	}

	@MethodRemark(remark = "新建用户")
	@RequestMapping(value = "/user/new", method = RequestMethod.GET)
	public String newUser(HttpServletRequest request, ModelMap model) {
		User user = new User();
		Person person = new Person();
		person.setUser(user);
		user.setPerson(person);
		model.addAttribute("user", user);
		model.addAttribute("actionUrl", request.getContextPath() + "/user/save");
		return "/user/userForm";
	}

	@MethodRemark(remark = "编辑用户信息")
	@RequestMapping(value = "/user/edit/{id}", method = RequestMethod.GET)
	public String editUser(@PathVariable String id, HttpServletRequest request,
			ModelMap model) {
		User user = userManager.findUserById(id);
		model.addAttribute("actionUrl", request.getContextPath()
				+ "/user/update");
		model.addAttribute("user", user);
		return "/user/userForm";
	}

	@MethodRemark(remark = "查看用户信息")
	@RequestMapping(value = "/user/view/{id}", method = RequestMethod.GET)
	public String viewUser(@PathVariable String id, HttpServletRequest request,
			ModelMap model) {
		User user = userManager.findUserById(id);
		model.addAttribute("user", user);
		return "/user/userForm";
	}

	@MethodRemark(remark = "保存用户")
	@RequestMapping(value = "/user/save", method = RequestMethod.POST)
	public @ResponseBody
	JSONObject saveUser(@ModelAttribute("user") User user,
			HttpServletRequest request, ModelMap model, SessionStatus status)
			throws Exception {
		JSONObject jsonObject = new JSONObject();
		try {
			user.setId(null);
			user.setPassword(passwordService.encryptPassword("1234"));
			userManager.saveUser(user);
			jsonObject.put("success", Boolean.TRUE);
			jsonObject.put("message", "用户息已保存!");
			status.setComplete();
		} catch (Exception e) {
			e.printStackTrace();
			jsonObject.put("success", Boolean.FALSE);
			jsonObject.put("message", "操作失败!");
		}
		return jsonObject;
	}

	@MethodRemark(remark = "更新用户")
	@RequestMapping(value = "/user/update", method = RequestMethod.POST)
	public @ResponseBody
	JSONObject updateUser(@ModelAttribute("user") User user,
			HttpServletRequest request, ModelMap model, SessionStatus status)
			throws Exception {
		JSONObject jsonObject = new JSONObject();
		try {
			userManager.saveUser(user);
			jsonObject.put("success", Boolean.TRUE);
			jsonObject.put("message", "用户信息已更新!");
			status.setComplete();
		} catch (Exception e) {
			e.printStackTrace();
			jsonObject.put("success", Boolean.FALSE);
			jsonObject.put("message", "操作失败!");
		}
		return jsonObject;
	}

	@MethodRemark(remark = "删除指定用户")
	@RequestMapping(value = "/user/delete")
	public @ResponseBody
	JSONObject deleteUser(String[] ids, HttpServletRequest request,
			ModelMap model) throws Exception {
		JSONObject jsonObject = new JSONObject();
		try {
			if (ids != null) {
				userManager.removeUsers(ids);
				jsonObject.put("success", Boolean.TRUE);
				jsonObject.put("message", "用户信息已删除!");
			}
		} catch (Exception e) {
			e.printStackTrace();
			jsonObject.put("success", Boolean.FALSE);
			jsonObject.put("message", "操作失败!");
		}
		return jsonObject;
	}

	@MethodRemark(remark = "锁定用户")
	@RequestMapping(value = "/user/lock/{id}", method = RequestMethod.GET)
	public @ResponseBody
	JSONObject lockUser(@PathVariable String id, HttpServletRequest request,
			ModelMap model) throws Exception {
		JSONObject jsonObject = new JSONObject();
		try {
			User user = userManager.findUserById(id);
			user.setEnabled(Boolean.FALSE);
			userManager.saveUser(user);
			jsonObject.put("success", Boolean.TRUE);
			jsonObject.put("message", "用户已锁定!");

		} catch (Exception e) {
			e.printStackTrace();
			jsonObject.put("success", Boolean.FALSE);
			jsonObject.put("message", "操作失败!");
		}
		return jsonObject;
	}

	@MethodRemark(remark = "用户解锁")
	@RequestMapping(value = "/user/unLock/{id}", method = RequestMethod.GET)
	public @ResponseBody
	JSONObject unLockUser(@PathVariable String id, HttpServletRequest request,
			ModelMap model) throws Exception {
		JSONObject jsonObject = new JSONObject();
		try {
			User user = userManager.findUserById(id);
			user.setEnabled(Boolean.TRUE);
			userManager.saveUser(user);
			jsonObject.put("success", Boolean.TRUE);
			jsonObject.put("message", "用户已解锁!");

		} catch (Exception e) {
			e.printStackTrace();
			jsonObject.put("success", Boolean.FALSE);
			jsonObject.put("message", "操作失败!");
		}
		return jsonObject;
	}

	@MethodRemark(remark = "选择用户")
	@RequestMapping(value = "/user/select", method = RequestMethod.GET)
	public String selectUser(HttpServletRequest request, ModelMap model) {
		String pageSize = WebUtils.getParaValue("DEFAULT_PAGE_SIZE", request);
		model.addAttribute(Constants.PAGE_SIZE,
				pageSize == null ? 15 : Integer.valueOf(pageSize));
		return "/user/selectUser";

	}

}
